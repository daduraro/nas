client_max_body_size 50000M;
server_tokens off;
resolver 127.0.0.11 ipv6=off; # internal docker dns resolver

# list of internal ips
geo $local_ip {
    default 0;
    192.168.0.0/24 1;
    10.192.1.0/24 1;
}


# redirect http to https
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

# ssl values
ssl_certificate /etc/nginx/certs/letsencrypt/live/daduraronas.duckdns.org/fullchain.pem;
ssl_certificate_key /etc/nginx/certs/letsencrypt/live/daduraronas.duckdns.org/privkey.pem;
ssl_dhparam /etc/nginx/certs/dhparam.pem;

map $http_upgrade $connection_upgrade {
	  default upgrade;
	  ''      close;
}

server {
    listen 443 ssl;
    server_name jd.*;

    satisfy any;
    allow 192.168.0.0/24;
    allow 10.192.1.0/24;
    deny all;
    #auth_basic "Restricted Content";
    #auth_basic_user_file /etc/nginx/auth/.htpasswd;

    location / {
        set $target "http://jdownloader:5800";
        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
	  location /websockify {
        set $target "http://jdownloader:5800";
        proxy_pass $target;
		    proxy_http_version 1.1;
		    proxy_set_header Upgrade $http_upgrade;
		    proxy_set_header Connection $connection_upgrade;
		    proxy_read_timeout 86400;
	  }
}
server {
    listen 443 ssl;
    server_name prowl.*;
    location / {
        satisfy any;
        allow 192.168.0.0/24;
        allow 10.192.1.0/24;
        deny all;
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/auth/.htpasswd;

        set $target "http://prowlarr:9696";

        # websocket connection
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
server {
    listen 443 ssl;
    server_name lidarr.*;
    location / {
        satisfy any;
        allow 192.168.0.0/24;
        allow 10.192.1.0/24;
        deny all;
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/auth/.htpasswd;

        set $target "http://lidarr:8686";

        # websocket connection
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
server {
    listen 443 ssl;
    server_name sonarr.*;
    location / {
        satisfy any;
        allow 192.168.0.0/24;
        allow 10.192.1.0/24;
        deny all;
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/auth/.htpasswd;

        set $target "http://sonarr:8989";

        # websocket connection
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
server {
    listen 443 ssl;
    server_name sonarr-anime.*;
    location / {
        satisfy any;
        allow 192.168.0.0/24;
        allow 10.192.1.0/24;
        deny all;
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/auth/.htpasswd;

        set $target "http://sonarr_anime:8990";

        # websocket connection
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
server {
    listen 443 ssl;
    server_name radarr.*;
    location / {
        satisfy any;
        allow 192.168.0.0/24;
        allow 10.192.1.0/24;
        deny all;
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/auth/.htpasswd;

        set $target "http://radarr:7878";

        # websocket connection
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 443 ssl;
    server_name pihole.*;

    if ( $local_ip = 0 ) { return 403; }

    location / {
        set $target "http://pihole:80";
        rewrite /(.*) /admin/$1 break;
        proxy_redirect /admin /;
        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 443 ssl;
    server_name calibre.*;

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        client_max_body_size 0;
        set $target "http://calibre-web:8083";
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
    }
}

server {
    listen 443 ssl;
    server_name nshop.*;

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        satisfy any;
        allow 192.168.0.0/24;
        allow 10.192.1.0/24;
        deny all;
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/auth/.nshop-htpasswd;
        client_max_body_size 0;

        set $target "http://switch-httpd:80";
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        proxy_pass $target;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_redirect off;
        proxy_buffering off;
    }
}

server {
    listen 443 ssl;
    server_name wordler.*;

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        client_max_body_size 0;

        set $target "http://wordler:8080";
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        proxy_pass $target;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_redirect off;
        proxy_buffering off;
    }
}

server {
    listen 443 ssl;
    server_name spliit.*;

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        client_max_body_size 0;

        set $target "http://spliit:3000";
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        proxy_pass $target;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_redirect off;
        proxy_buffering off;
    }
}

server {
    listen 443 ssl;
    server_name baserow.*;
    client_max_body_size 0;

    # Upgrade websocket requests and route the api backend
    location ~ ^/(api|ws)/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        set $target "http://caddybaserow:80";
        proxy_pass $target;
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        set $target "http://caddybaserow:80";
        proxy_pass $target;
    }
}



server {
    listen 443 ssl;
    server_name im.*;
    client_max_body_size 0;

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        set $target "http://immich_server:3001";
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        proxy_pass $target;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # http://nginx.org/en/docs/http/websocket.html
        proxy_http_version 1.1;
        proxy_set_header   Upgrade    $http_upgrade;
        proxy_set_header   Connection "upgrade";

        proxy_redirect off;
        proxy_buffering off;
    }
}

server {
    listen 443 ssl;
    server_name oc.*;

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }

    location / {
        client_max_body_size 0;
        set $target "http://owncloud:8080";
        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        proxy_pass $target;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_buffering off;
    }
}

server {
    listen 443 ssl default_server;
    server_name _;
    return 404;
}
